syntax = "proto3";

/* 注意事项:
 * package 和 option 是固定的，不可更改
 * service、rpc方法、message、enum的命名须符合PascalCase规范
 * service名称必须以Service结尾
 * 入参的message必须以Request结果
 * 出参的message必须以Response结尾，切前2个字段必须是return_code和return_msg
 * message的字段命名须符合lower_snake_case
 * 枚举项全部大写，且至少有一个，枚举序号必须从0开始
 * 字段常用的基础数据类型:double、float、int32、int64、bool、string、bytes
 * 一旦将文件提交至大仓，不得再对service名、rpc方法名、message名以及字段名、字段类型、字段序号进行修改
 */

package autohome.rpc.car.web_main.v1.spec;
option java_multiple_files = true;
option java_outer_classname = "SpecProto";
option java_package = "autohome.rpc.car.web_main.v1.spec";
option go_package = "git.corpautohome.com/microservice/go-genproto/autohome/rpc/car/web_main/v1/spec;spec";
option csharp_namespace = "autohome.rpc.car.web_main.v1.spec";


/**
  * service 样例
  * 维护人: zhangfeifei16658
  * 生产环境 - 主机: car_web_main.grpc.corpautohome.com
  * 预发环境 - 主机: car_web_main.thallo.corpautohome.com
  * 测试环境 - 主机: car_web_main.terra.corpautohome.com
 */
service SpecService {
  /**
    * rpc方法样例
    * 维护人:zff
    */
  rpc GetSpecListBySeries (GetSpecListBySeriesRequest) returns (GetSpecListBySeriesResponse) {}
}

message GetSpecListBySeriesRequest {
  int32 pageindex = 1;
  int32 pagesize = 2;
  /**
     0:精准
     1:新能源；
     3：复杂查询；
   */
  int32 searchtype = 3;
  /**
    1、车系热度排序，
    2、车系最低价升序，
    3、车系最高价降序，
    4、（车系工业协会销量） 销量从高到低;
    5、续航里程降序 只算新能源
    6、油耗升序   排除新能源的车
    7、车系降幅降序 （app前台：降幅大）
    40、 乘联会车系销量倒序
    */
  int32 orderid = 4;
  /**
   *  级别:levelid=7,14
   */
  string levelid = 5;
  /**
    * 价格区间，例如：price=10_15,15_20
    */
  string price = 6;

  /**
    * 车型相关标签,即用途.例如：autotag=38,25
    */
  string autotag = 7;
  /**
    * 价格区间，品牌id  .brandid=1,3
    */
  string brandid = 8;
  /**
    * 国别country=1,2
    */
  string country = 9;
  /**
    * 自主合资进口;place=1,2
    */
  string place = 10;
  /**
    * 变速箱细分gearbox=1,3
    */
  string gearbox = 11;

  /**
   * 燃料类型细分 fueltypedetail=1,2
   */
  string fueltypedetail = 12;
  /**
     * 续航里程
     */
  string endurancemileage = 13;

  /**
   * 电池类型
   */
  string batterytype = 14;
  /**
     * 排量 deliverycapacity=2.1_2.5,2.6_3.0
     */
  string deliverycapacity = 15;

  /**
   * 马力horsepower=101_150,151_200
   */
  string horsepower = 16;

  /**
     * 百公里加速 &speedup=4_6,6_8
     */
  string speedup = 17;

  /**
    * 气缸数  cylindernum=3,9[3-9]
    */
  string cylindernum = 18;

  /**
     * 进气方式flowmode=1,2,3[1-3]
     */
  string flowmode = 19;
  /**
     * 环保标准 &greenstandards=1,2,3[1-3]
     */
  string greenstandards = 20;
  /**
     * 供油方式 &oilsupply=1,2,3【1-3】
     */
  string oilsupply = 21;
  /**
     *  燃油标号 fuellabel=1,2,3,4【1-4】
     */
  string fuellabel = 22;
  /**
     * 车身结构 structid=1,2,3,4,7,5,6【1-6】
     */
  string structid = 23;
  /**
     * 座位数seatsnum=2,4,5,6,7,8【2-8】
     */
  string  seatsnum = 24;
  /**
     * 底盘制动-驱动方式 driveform=1,2,3【1-3】
     */
  string driveform = 25;
  /**
      * 驻车制动类型 braketype=1,2,3【1-3】
      */
  string braketype = 26;
  /**
    * 主配置：mainconfig=147,107,18,202,108,109,6,8,111,196,195,1700000,1800000,16400000,153,26,34,154,115,131,130,63,172,67,174,118,183,101,104,211,143
    */
  string mainconfig = 27;
  /**
    * 次要配置:subconfig=1001_3,1001_4,1001_5,1001_6,1001_m4
    */
  string subconfig = 28;
  /**
    * 发动机布局
    */
  string  enginelayout = 29;

  /**
   * 城市id
   */
  int32 cityid = 30;

  /**
   * 是否需要榜单标签
   */
  int32 filteranktag = 31;
  int32 seriesid = 32;
  int32 state = 33;
}


message GetSpecListBySeriesResponse {
  int32 return_code = 1 [json_name = "returncode"];
  string return_msg = 2 [json_name = "message"];
  Result result = 3;
  message Result {
    int32 seriesid = 1;
    repeated SpecItems items = 2;
    message SpecItems {
      int32 id = 1;
      string specname = 2;
      int32 maxprice = 3;
      int32 minprice = 4;
      int32 specstate = 5;

    }
  }
}

